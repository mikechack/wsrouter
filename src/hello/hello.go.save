package main

import "fmt"
import "log"
import "net/http"
import "time"
import "code.google.com/p/go.net/context"
import "code.google.com/p/go.net/websocket"
import "registrar"

//import "errors"

type T struct {
	Msg  string
	From string
	To   string
}

func first(c chan context.Context) {

	var (
		ctx    context.Context
		cancel context.CancelFunc
	)

	ctx, cancel = context.WithCancel(context.Background())

	defer cancel()

	c <- ctx

	time.Sleep(2000 * time.Millisecond)
	fmt.Printf("Greetings from first() - %x\n", &ctx)

}

func second(c chan context.Context) {

	ctx := <-c

	select {
	case <-ctx.Done():
		fmt.Printf("Detected context done\n")
	}

	fmt.Printf("Greetings from second() - %x\n", &ctx)

}

func echoHandler(ws *websocket.Conn) {

	id := ws.Request().Header.Get("X-Client-ID")

	err := registrar.NewConnection(id)

	if err != nil {
		fmt.Printf("New Connection Failed - Duplicate CLient Id %s\n", id)
		ws.Close()
	} else {

		for {
			var data = T{}
			err = websocket.JSON.Receive(ws, &data)
			if err != nil {
				log.Printf("echo handler error %v\n", err)
				break
			}
			data.From = id

			fmt.Printf("Server Receive: %s\n", data.Msg)

			websocket.JSON.Send(ws, data)

			if err != nil {
				log.Printf("echo handler error %v\n", err)
				break
			}

		}

		registrar.RemoveConnection(id)
	}
}

func validateConnectRequest(c *websocket.Config, r *http.Request) error {

	fmt.Printf("\n\nValidate Connection Request URI - %v \n", r.RequestURI)
	fmt.Printf("Validate Connection Request Method- %v \n\n", r.Method)
	fmt.Printf("Validate Connection Request Client-ID- %v \n\n", r.Header.Get("X-Client-ID"))

	err := registrar.ValidateConnectionRequest(r.Header.Get("X-Client-ID"))

	if err != nil {
		log.Printf("Validate Connection Request Error %v\n", err)
	}

	return err

}

func httpListener(c chan bool) {
	http.Handle("/echo/", websocket.Server{Handshake: validateConnectRequest, Handler: websocket.Handler(echoHandler)})
	http.HandleFunc("/kill", func(x http.ResponseWriter, y *http.Request) { c <- true })
	err := http.ListenAndServe(":8080", nil)
	if err != nil {
		panic("ListenAndServe: " + err.Error())
	}
}

func main() {

	chan1 := make(chan bool)
	chan2 := make(chan bool, 1)

	chan2 <- true

	select {
	case chan2 <- true:
	default:
		fmt.Printf("\n\nCould not write to channel 2\n\n")
	}

	//go first (chan1)
	//go second (chan1)

	go httpListener(chan1)
	//time.Sleep(50000 * time.Millisecond)

	select {
	case <-chan1:
		fmt.Printf("\n\nDetected context done\n\n")
	}

	fmt.Printf("goodbye\n")
}
